# <script id="defaultShader" type="wgsl">
webgpu{
struct VertexOutput {
  @builtin(position) position: vec4<f32>;
  @location(1) normal: vec3<f32>;
  @location(2) uv: vec2<f32>;
};

struct Uniform {
  model_matrix: mat4x4<f32>;
  view_matrix: mat4x4<f32>;
  projection_matrix: mat4x4<f32>;
  normal_matrix: mat3x3<f32>;
  elapsedTime: f32; // in seconds
};

@group(0) @binding(0)
var<uniform> unif: Uniform;

@stage(vertex)
fn vs_main(
  @location(0) position: vec3<f32>,
  @location(1) normal: vec3<f32>,
  @location(2) uv: vec2<f32>,
) -> VertexOutput {
  var out: VertexOutput;
  out.position = unif.projection_matrix * unif.view_matrix * unif.model_matrix * vec4<f32>(position, 1.0);
  out.normal = normalize(unif.normal_matrix * normal);
  out.uv = uv;
  return out;
}

@stage(fragment)
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
  return vec4<f32>(in.uv, pow(cos(unif.elapsedTime), 2.0), 1.0);
}
}