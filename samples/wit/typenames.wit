// Extracted from:
// https://github.com/WebAssembly/WASI/blob/main/phases/old/snapshot_0/witx/typenames.witx
// https://github.com/WebAssembly/wasi-io/blob/main/standard/io/witx/typenames.witx

/// Type names used by low-level WASI interfaces.

/// An array size.
///
/// Note: This is similar to `size_t` in POSIX.
// TODO: This is defined as `usize` in the original witx file. Should verify that this type is good as it is defined here
type size = u32

/// Non-negative file size or length of a region within a file.
type filesize = u64

/// Timestamp in nanoseconds.
type timestamp = u64

/// A file descriptor handle.
// TODO: this is of type `handle` in the witx file
type fd = u32

/// A reference to the offset of a directory entry.
type dircookie = u64

// In an `fd_readdir` call, this value signifies the start of the directory.
// TODO: this cannot be represented in .wit files as of today
// (@witx const $dircookie $start 0)

/// The type for the `dirent::d-namlen` field of `dirent` struct.
type dirnamlen = u32

/// File serial number that is unique within its file system.
type inode = u64

/// Identifier for a device containing a file system. Can be used in combination
/// with `inode` to uniquely identify a file or directory in the filesystem.
type device = u64

type linkcount = u64
type snapshot0-linkcount = u32

type tid = u32
type pid = u32

/// Identifiers for clocks, snapshot0 version.
enum snapshot0-clockid {
    // TODO: wit appears to not have support for enum tag types
    //(@witx tag u32)

    /// The clock measuring real time. Time value zero corresponds with
    /// 1970-01-01T00:00:00Z.
    realtime,
    /// The store-wide monotonic clock, which is defined as a clock measuring
    /// real time, whose value cannot be adjusted and which cannot have negative
    /// clock jumps. The epoch of this clock is undefined. The absolute time
    /// value of this clock therefore has no meaning.
    monotonic,
    /// The CPU-time clock associated with the current process.
    process-cputime-id,
    /// The CPU-time clock associated with the current thread.
    thread-cputime-id,
}

/// Identifiers for clocks.
enum clockid {
    // TODO: wit appears to not have support for enum tag types
    //(@witx tag u32)

    /// The clock measuring real time. Time value zero corresponds with
    /// 1970-01-01T00:00:00Z.
    realtime,
    /// The store-wide monotonic clock, which is defined as a clock measuring
    /// real time, whose value cannot be adjusted and which cannot have negative
    /// clock jumps. The epoch of this clock is undefined. The absolute time
    /// value of this clock therefore has no meaning.
    monotonic,
}

/// Error codes returned by functions.
/// Not all of these error codes are returned by the functions provided by this
/// API; some are used in higher-level library layers, and others are provided
/// merely for alignment with POSIX.
enum errno {
    // TODO: wit appears to not have support for enum tag types
    //(@witx tag u16)

    /// No error occurred. System call completed successfully.
    success,
    /// Argument list too long.
    toobig,
    /// Permission denied.
    access,
    /// Address in use.
    addrinuse,
    /// Address not available.
    addrnotavail,
    /// Address family not supported.
    afnosupport,
    /// Resource unavailable, or operation would block.
    again,
    /// Connection already in progress.
    already,
    /// Bad file descriptor.
    badf,
    /// Bad message.
    badmsg,
    /// Device or resource busy.
    busy,
    /// Operation canceled.
    canceled,
    /// No child processes.
    child,
    /// Connection aborted.
    connaborted,
    /// Connection refused.
    connrefused,
    /// Connection reset.
    connreset,
    /// Resource deadlock would occur.
    deadlk,
    /// Destination address required.
    destaddrreq,
    /// Mathematics argument out of domain of function.
    dom,
    /// Reserved.
    dquot,
    /// File exists.
    exist,
    /// Bad address.
    fault,
    /// File too large.
    fbig,
    /// Host is unreachable.
    hostunreach,
    /// Identifier removed.
    idrm,
    /// Illegal byte sequence.
    ilseq,
    /// Operation in progress.
    inprogress,
    /// Interrupted function.
    intr,
    /// Invalid argument.
    inval,
    /// I/O error.
    io,
    /// Socket is connected.
    isconn,
    /// Is a directory.
    isdir,
    /// Too many levels of symbolic links.
    loop,
    /// File descriptor value too large.
    mfile,
    /// Too many links.
    mlink,
    /// Message too large.
    msgsize,
    /// Reserved.
    multihop,
    /// Filename too long.
    nametoolong,
    /// Network is down.
    netdown,
    /// Connection aborted by network.
    netreset,
    /// Network unreachable.
    netunreach,
    /// Too many files open in system.
    nfile,
    /// No buffer space available.
    nobufs,
    /// No such device.
    nodev,
    /// No such file or directory.
    noent,
    /// Executable file format error.
    noexec,
    /// No locks available.
    nolck,
    /// Reserved.
    nolink,
    /// Not enough space.
    nomem,
    /// No message of the desired type.
    nomsg,
    /// Protocol not available.
    noprotoopt,
    /// No space left on device.
    nospc,
    /// Function not supported.
    nosys,
    /// The socket is not connected.
    notconn,
    /// Not a directory or a symbolic link to a directory.
    notdir,
    /// Directory not empty.
    notempty,
    /// State not recoverable.
    notrecoverable,
    /// Not a socket.
    notsock,
    /// Not supported, or operation not supported on socket.
    notsup,
    /// Inappropriate I/O control operation.
    notty,
    /// No such device or address.
    nxio,
    /// Value too large to be stored in data type.
    overflow,
    /// Previous owner died.
    ownerdead,
    /// Operation not permitted.
    perm,
    /// Broken pipe.
    pipe,
    /// Protocol error.
    proto,
    /// Protocol not supported.
    protonosupport,
    /// Protocol wrong type for socket.
    prototype,
    /// Result too large.
    range,
    /// Read-only file system.
    rofs,
    /// Invalid seek.
    spipe,
    /// No such process.
    srch,
    /// Reserved.
    stale,
    /// Connection timed out.
    timedout,
    /// Text file busy.
    txtbsy,
    /// Cross-device link.
    xdev,
    /// Extension: Capabilities insufficient.
    notcapable,
}

enum bus-errno {
    // TODO: wit appears to not have support for enum tag types
    //(@witx tag u32)

    /// No error occurred. Call completed successfully.
    success,
    /// Failed during serialization
    ser,
    /// Failed during deserialization
    des,
    /// Invalid WAPM process
    wapm,
    /// Failed to fetch the WAPM process
    fetch,
    /// Failed to compile the WAPM process
    compile,
    /// Invalid ABI
    abi,
    /// Call was aborted
    aborted,
    /// Bad handle
    badhandle,
    /// Invalid topic
    topic,
    /// Invalid callback
    badcb,
    /// Call is unsupported
    unsupported,
    /// Bad request
    badrequest,
    /// Access denied
    denied,
    /// Internal error has occured
    internal,
    /// Memory allocation failed
    alloc,
    /// Invocation has failed
    invoke,
    /// Already consumed
    consumed,
    /// Memory access violation
    memviolation,
    /// Some other unhandled error. If you see this, it's probably a bug.
    unknown,
}

/// File descriptor rights, determining which actions may be performed.
flags rights {
    // TODO: wit doesnt appear to support repr
    // flags (@witx repr u64)
  
    /// The right to invoke `fd_datasync`.
    ///
    /// If `rights::path_open` is set, includes the right to invoke
    /// `path_open` with `fdflags::dsync`.
    fd-datasync,
    /// The right to invoke `fd_read` and `sock_recv`.
    ///
    /// If `rights::fd_seek` is set, includes the right to invoke `fd_pread`.
    fd-read,
    /// The right to invoke `fd_seek`. This flag implies `rights::fd_tell`.
    fd-seek,
    /// The right to invoke `fd_fdstat_set_flags`.
    fd-fdstat-set-flags,
    /// The right to invoke `fd_sync`.
    ///
    /// If `rights::path_open` is set, includes the right to invoke
    /// `path_open` with `fdflags::rsync` and `fdflags::dsync`.
    fd-sync,
    /// The right to invoke `fd_seek` in such a way that the file offset
    /// remains unaltered (i.e., `whence::cur` with offset zero), or to
    /// invoke `fd_tell`.
    fd-tell,
    /// The right to invoke `fd_write` and `sock_send`.
    /// If `rights::fd_seek` is set, includes the right to invoke `fd_pwrite`.
    fd-write,
    /// The right to invoke `fd_advise`.
    fd-advise,
    /// The right to invoke `fd_allocate`.
    fd-allocate,
    /// The right to invoke `path_create_directory`.
    path-create-directory,
    /// If `rights::path_open` is set, the right to invoke `path_open` with `oflags::creat`.
    path-create-file,
    /// The right to invoke `path_link` with the file descriptor as the
    /// source directory.
    path-link-source,
    /// The right to invoke `path_link` with the file descriptor as the
    /// target directory.
    path-link-target,
    /// The right to invoke `path_open`.
    path-open,
    /// The right to invoke `fd_readdir`.
    fd-readdir,
    /// The right to invoke `path_readlink`.
    path-readlink,
    /// The right to invoke `path_rename` with the file descriptor as the source directory.
    path-rename-source,
    /// The right to invoke `path_rename` with the file descriptor as the target directory.
    path-rename-target,
    /// The right to invoke `path_filestat_get`.
    path-filestat-get,
    /// The right to change a file's size (there is no `path_filestat_set_size`).
    /// If `rights::path_open` is set, includes the right to invoke `path_open` with `oflags::trunc`.
    path-filestat-set-size,
    /// The right to invoke `path_filestat_set_times`.
    path-filestat-set-times,
    /// The right to invoke `fd_filestat_get`.
    fd-filestat-get,
    /// The right to invoke `fd_filestat_set_size`.
    fd-filestat-set-size,
    /// The right to invoke `fd_filestat_set_times`.
    fd-filestat-set-times,
    /// The right to invoke `path_symlink`.
    path-symlink,
    /// The right to invoke `path_remove_directory`.
    path-remove-directory,
    /// The right to invoke `path_unlink_file`.
    path-unlink-file,
    /// If `rights::fd_read` is set, includes the right to invoke `poll_oneoff` to subscribe to `eventtype::fd_read`.
    /// If `rights::fd_write` is set, includes the right to invoke `poll_oneoff` to subscribe to `eventtype::fd_write`.
    poll-fd-readwrite,
    /// The right to invoke `sock_shutdown`.
    sock-shutdown,

    /// TODO: Found in wasmer-wasi-types rust project, but not in wasi-snapshot0
    sock-accept,
    /// TODO: Found in wasmer-wasi-types rust project, but not in wasi-snapshot0
    sock-connect,
    /// TODO: Found in wasmer-wasi-types rust project, but not in wasi-snapshot0
    sock-listen,
    /// TODO: Found in wasmer-wasi-types rust project, but not in wasi-snapshot0
    sock-bind,
    /// TODO: Found in wasmer-wasi-types rust project, but not in wasi-snapshot0
    sock-recv,
    /// TODO: Found in wasmer-wasi-types rust project, but not in wasi-snapshot0
    sock-send,
    /// TODO: Found in wasmer-wasi-types rust project, but not in wasi-snapshot0
    sock-addr-local,
    /// TODO: Found in wasmer-wasi-types rust project, but not in wasi-snapshot0
    sock-addr-remote,
    /// TODO: Found in wasmer-wasi-types rust project, but not in wasi-snapshot0
    sock-recv-from,
    /// TODO: Found in wasmer-wasi-types rust project, but not in wasi-snapshot0
    sock-send-to,
}

/// The type of a file descriptor or file.
enum filetype {
    // TODO: wit appears to not have support for enum tag types
    //(@witx tag u8)

    /// The type of the file descriptor or file is unknown or is different from any of the other types specified.
    unknown,
    /// The file descriptor or file refers to a block device inode.
    block-device,
    /// The file descriptor or file refers to a character device inode.
    character-device,
    /// The file descriptor or file refers to a directory inode.
    directory,
    /// The file descriptor or file refers to a regular file inode.
    regular-file,
    /// The file descriptor or file refers to a datagram socket.
    socket-dgram,
    /// The file descriptor or file refers to a byte-stream socket.
    socket-stream, 
    /// The file refers to a symbolic link inode.
    symbolic-link,
    /// The file descriptor or file refers to a FIFO.
    fifo,
}

/// A directory entry, snapshot0 version.
record snapshot0-dirent {
    /// The offset of the next directory entry stored in this directory.
    d-next: dircookie,
    /// The serial number of the file referred to by this directory entry.
    d-ino: inode,
    /// The length of the name of the directory entry.
    d-namlen: dirnamlen,
    /// The type of the file referred to by this directory entry.
    d-type: filetype,
}

/// A directory entry.
record dirent {
    /// The offset of the next directory entry stored in this directory.
    d-next: dircookie,
    /// The serial number of the file referred to by this directory entry.
    d-ino: inode,
    /// The type of the file referred to by this directory entry.
    d-type: filetype,
    /// The length of the name of the directory entry.
    d-namlen: dirnamlen,
}

/// File or memory access pattern advisory information.
enum advice {
    // TODO: wit appears to not have support for enum tag types
    //enum (@witx tag u8)

    /// The application has no advice to give on its behavior with respect to the specified data.
    normal,
    /// The application expects to access the specified data sequentially from lower offsets to higher offsets.
    sequential,
    /// The application expects to access the specified data in a random order.
    random,
    /// The application expects to access the specified data in the near future.
    willneed,
    /// The application expects that it will not access the specified data in the near future.
    dontneed,
    /// The application expects to access the specified data once and then not reuse it thereafter.
    noreuse,
}

/// File descriptor flags.
flags fdflags {
    // TODO: wit appears to not have support for flags repr
    //(@witx repr u16)

    /// Append mode: Data written to the file is always appended to the file's end.
    append,
    /// Write according to synchronized I/O data integrity completion. Only the data stored in the file is synchronized.
    dsync,
    /// Non-blocking mode.
    nonblock,
    /// Synchronized read I/O operations.
    rsync,
    /// Write according to synchronized I/O file integrity completion. In
    /// addition to synchronizing the data stored in the file, the implementation
    /// may also synchronously update the file's metadata.
    sync,
}

/// File descriptor attributes.
record fdstat {
    /// File type.
    fs-filetype: filetype,
    /// File descriptor flags.
    fs-flags: fdflags,
    /// Rights that apply to this file descriptor.
    fs-rights-base: rights,
    /// Maximum set of rights that may be installed on new file descriptors that
    /// are created through this file descriptor, e.g., through `path_open`.
    fs-rights-inheriting: rights,
}

/// Which file time attributes to adjust.
/// TODO: wit appears to not have support for flags repr
/// (@witx repr u16)
flags fstflags {
    /// Adjust the last data access timestamp to the value stored in `filestat::atim`.
    set-atim,
    /// Adjust the last data access timestamp to the time of clock `clockid::realtime`.
    set-atim-now,
    /// Adjust the last data modification timestamp to the value stored in `filestat::mtim`.
    set-mtim,
    /// Adjust the last data modification timestamp to the time of clock `clockid::realtime`.
    set-mtim-now,
}

/// Flags determining the method of how paths are resolved.
///  TODO: wit appears to not have support for flags repr
/// (@witx repr u32)
flags lookup {
    /// As long as the resolved path corresponds to a symbolic link, it is expanded.
    symlink-follow,
}

/// Open flags used by `path_open`.
/// TODO: wit appears to not have support for flags repr
/// (@witx repr u16)
flags oflags {
    /// Create file if it does not exist.
    create,
    /// Fail if not a directory.
    directory,
    /// Fail if file already exists.
    excl,
    /// Truncate file to size 0.
    trunc,
}

/// User-provided value that may be attached to objects that is retained when
/// extracted from the implementation.
type userdata = u64

/// Type of a subscription to an event or its occurrence.
enum eventtype {
    // TODO: wit appears to not have support for enum tag types
    //(@witx tag u8)

    /// The time value of clock `subscription_clock::id` has
    /// reached timestamp `subscription_clock::timeout`.
    clock,
    /// File descriptor `subscription_fd_readwrite::fd` has data
    /// available for reading. This event always triggers for regular files.
    fd-read,
    /// File descriptor `subscription_fd_readwrite::fd` has capacity
    /// available for writing. This event always triggers for regular files.
    fd-write,
}

/// Flags determining how to interpret the timestamp provided in
/// `subscription-clock::timeout`.
flags subclockflags {
    // TODO: wit appears to not have support for flags repr
    //@witx repr u16)
    /// If set, treat the timestamp provided in
    /// `subscription-clock::timeout` as an absolute timestamp of clock
    /// `subscription-clock::id`. If clear, treat the timestamp
    /// provided in `subscription-clock::timeout` relative to the
    /// current time value of clock `subscription-clock::id`.
    subscription-clock-abstime,
}

/// The contents of a `subscription` when type is `eventtype::clock`.
record snapshot0-subscription-clock {
    /// The user-defined unique identifier of the clock.
    identifier: userdata,
    /// The clock against which to compare the timestamp.
    id: snapshot0-clockid,
    /// The absolute or relative timestamp.
    timeout: timestamp,
    /// The amount of time that the implementation may wait additionally
    /// to coalesce with other events.
    precision: timestamp,
    /// Flags specifying whether the timeout is absolute or relative
    %flags: subclockflags
}

/// The contents of a `subscription` when type is `eventtype::clock`.
record subscription-clock {
    /// The clock against which to compare the timestamp.
    clock-id: clockid,
    /// The absolute or relative timestamp.
    timeout: timestamp,
    /// The amount of time that the implementation may wait additionally
    /// to coalesce with other events.
    precision: timestamp,
    /// Flags specifying whether the timeout is absolute or relative
    %flags: subclockflags,
}

/// Identifiers for preopened capabilities.
enum preopentype {
    // TODO: wit appears to not have support for enum tag types
    //(@witx tag u8)

    /// A pre-opened directory.
    dir,
}

/// The state of the file descriptor subscribed to with
/// `eventtype::fd_read` or `eventtype::fd_write`.
flags eventrwflags {
    // TODO: wit appears to not have support for flags repr
    //@witx repr u16)

    /// The peer of this socket has closed or disconnected.
    fd-readwrite-hangup,
}

/// The contents of an `event` for the `eventtype::fd_read` and
/// `eventtype::fd_write` variants
record event-fd-readwrite {
    /// The number of bytes available for reading or writing.
    nbytes: filesize,
    /// The state of the file descriptor.
    %flags: eventrwflags,
}

/// An event that occurred.
record event {
    /// User-provided value that got attached to `subscription::userdata`.
    userdata: userdata,
    /// If non-zero, an error that occurred while processing the subscription request.
    error: errno,
    /// The type of the event that occurred, and the contents of the event
    data: event-enum
}

/// The contents of an `event`.
variant event-enum {
    // TODO: wit appears to not have support for tag type
    //(@witx tag $eventtype)
    fd-read(event-fd-readwrite),
    fd-write(event-fd-readwrite),
    clock,
}


/// An event that occurred.
record snapshot0-event {
    /// User-provided value that got attached to `subscription::userdata`.
    userdata: userdata,
    /// If non-zero, an error that occurred while processing the subscription request.
    error: errno,
    /// The type of event that occured
    %type: eventtype,
    /// The contents of the event, if it is an `eventtype::fd_read` or
    /// `eventtype::fd_write`. `eventtype::clock` events ignore this field.
    fd-readwrite: event-fd-readwrite,
}

/// The contents of a `subscription`, snapshot0 version.
variant snapshot0-subscription-enum {
     // TODO: wit appears to have no support for tag types
     //(@witx tag $eventtype)
     clock(snapshot0-subscription-clock),
     read(subscription-fs-readwrite),
     write(subscription-fs-readwrite),
}

/// The contents of a `subscription`.
variant subscription-enum {
     // TODO: wit appears to have no support for tag types
     //(@witx tag $eventtype)
     clock(subscription-clock),
     read(subscription-fs-readwrite),
     write(subscription-fs-readwrite),
}

/// The contents of a `subscription` when the variant is
/// `eventtype::fd_read` or `eventtype::fd_write`.
record subscription-fs-readwrite {
    /// The file descriptor on which to wait for it to become ready for reading or writing.
    file-descriptor: fd,
}

record snapshot0-subscription {
    userdata: userdata,
    data: snapshot0-subscription-enum,
}

record subscription {
    userdata: userdata,
    data: subscription-enum,
}

enum socktype {
    dgram,
    %stream,
    raw,
    seqpacket,
}

enum sockstatus {
    opening,
    opened,
    closed,
    failed,
}

enum sockoption {
    noop,
    reuse-port,
    reuse-addr,
    no-delay,
    dont-route,
    only-v6,
    broadcast,
    multicast-loop-v4,
    multicast-loop-v6,
    promiscuous,
    listening,
    last-error,
    keep-alive,
    linger,
    oob-inline,
    recv-buf-size,
    send-buf-size,
    recv-lowat,
    send-lowat,
    recv-timeout,
    send-timeout,
    connect-timeout,
    accept-timeout,
    ttl,
    multicast-ttl-v4,
    %type,
    proto,
}

enum streamsecurity {
    unencrypted,
    any-encryption,
    classic-encryption,
    double-encryption,
}

enum addressfamily {
    unspec,
    inet4,
    inet6,
    unix,
}

record snapshot0-filestat {
    st-dev: device,
    st-ino: inode,
    st-filetype: filetype,
    st-nlink: snapshot0-linkcount,
    st-size: filesize,
    st-atim: timestamp,
    st-mtim: timestamp,
    st-ctim: timestamp,
}

record filestat {
    st-dev: device,
    st-ino: inode,
    st-filetype: filetype,
    st-nlink: linkcount,
    st-size: filesize,
    st-atim: timestamp,
    st-mtim: timestamp,
    st-ctim: timestamp,
}

enum snapshot0-whence {
  cur,
  end,
  set,
}

enum whence {
    set,
    cur,
    end,
}

record tty {
    cols: u32,
    rows: u32,
    width: u32,
    height: u32,
    stdin-tty: bool,
    stdout-tty: bool,
    stderr-tty: bool,
    echo: bool,
    line-buffered: bool,
}

enum bus-data-format {
    raw,
    bincode,
    message-pack,
    json,
    yaml,
    xml,
    rkyv,
}

enum bus-event-type {
    noop,
    exit,
    call,
    result,
    fault,
    close,
}

type bid = u32

type cid = u32

/// __wasi_option_t
enum option-tag {
    none,
    some,
}

record option-bid {
    tag: option-tag,
    bid: bid
}

record option-cid {
    tag: option-tag,
    cid: cid
}

record option-fd {
    tag: option-tag,
    fd: fd
}

record bus-handles {
    bid: bid,
    stdin: option-fd,
    stdout: option-fd,
    stderr: option-fd,
}

type exit-code = u32

record bus-event-exit {
    bid: bid,
    rval: exit-code,
}

record bus-event-fault {
    cid: cid,
    err: bus-errno,
}

record bus-event-close {
    cid: cid,
}

type event-fd-flags = u16

record prestat-u-dir {
    pr-name-len: u32,
}

record prestat-u {
    dir: prestat-u-dir,
}

record prestat {
    pr-type: preopentype,
    u: prestat-u,
}

type file-delta = s64

type lookup-flags = u32

type count = u32

record pipe-handles {
    pipe: fd,
    other: fd,
}

enum stdio-mode {
    reserved, // = 0, stdio-mode starts at 1
    piped,
    inherit,
    null,
    log,
}

enum sock-proto {
    ip,
    icmp,
    igmp,
    proto-three,
    ipip,
    proto-five,
    tcp,
    proto-seven,
    egp,
    proto-nine,
    proto-ten,
    proto-eleven,
    pup,
    proto-thirteen,
    proto-fourteen,
    proto-fifteen,
    proto-sixteen,
    udp,
    proto-eighteen,
    proto-nineteen,
    proto-twenty,
    proto-twentyone,
    idp,
    proto-twentythree,
    proto-twentyfour,
    proto-twentyfive,
    proto-twentysix,
    proto-twentyseven,
    proto-twentyeight,
    proto-tp,
    proto-thirty,
    proto-thirtyone,
    proto-thirtytwo,
    dccp,
    proto-thirtyfour,
    proto-thirtyfive,
    proto-thirtysix,
    proto-thirtyseven,
    proto-thirtyeight,
    proto-thirtynine,
    proto-fourty,
    ipv6,
    proto-fourtytwo,
    routing,
    fragment,
    proto-fourtyfive,
    rsvp,
    gre,
    proto-fourtyeight,
    proto-fourtynine,
    esp,
    ah,
    proto-fiftytwo,
    proto-fiftythree,
    proto-fiftyfour,
    proto-fiftyfive,
    proto-fiftysix,
    proto-fiftyseven,
    icmpv6,
    none,
    dstopts,
    proto-sixtyone,
    proto-sixtytwo,
    proto-sixtythree,
    proto-sixtyfour,
    proto-sixtyfive,
    proto-sixtysix,
    proto-sixtyseven,
    proto-sixtyeight,
    proto-sixtynine,
    proto-seventy,
    proto-seventyone,
    proto-seventytwo,
    proto-seventythree,
    proto-seventyfour,
    proto-seventyfive,
    proto-seventysix,
    proto-seventyseven,
    proto-seventyeight,
    proto-seventynine,
    proto-eighty,
    proto-eightyone,
    proto-eightytwo,
    proto-eightythree,
    proto-eightyfour,
    proto-eightyfive,
    proto-eightysix,
    proto-eightyseven,
    proto-eightyeight,
    proto-eightynine,
    proto-ninety,
    proto-ninetyone,
    mtp,
    proto-ninetythree,
    beetph,
    proto-ninetyfive,
    proto-ninetysix,
    proto-nineetyseven,
    encap,
    proto-ninetynine,
    proto-onehundred,
    proto-onehundredandone,
    proto-onehundredandtwo,
    pim,
    proto-onehundredandfour,
    proto-onehundredandfive,
    proto-onehundredandsix,
    proto-onehundredandseven,
    comp,
    proto-onehundredandnine,
    proto-onehundredandten,
    proto-onehundredandeleven,
    proto-onehundredandtwelve,
    proto-onehundredandthirteen,
    proto-onehundredandfourteen,
    proto-onehundredandfifteen,
    proto-onehundredandsixteen,
    proto-onehundredandseventeen,
    proto-onehundredandeighteen,
    proto-onehundredandnineteen,
    proto-onehundredandtwenty,
    proto-onehundredandtwentyone,
    proto-onehundredandtwentytwo,
    proto-onehundredandtwentythree,
    proto-onehundredandtwentyfour,
    proto-onehundredandtwentyfive,
    proto-onehundredandtwentysix,
    proto-onehundredandtwentyseven,
    proto-onehundredandtwentyeight,
    proto-onehundredandtwentynine,
    proto-onehundredandthirty,
    proto-onehundredandthirtyone,
    sctp,
    proto-onehundredandthirtythree,
    proto-onehundredandthirtyfour,
    mh,
    udplite,
    mpls,
    proto-onehundredandthirtyeight,
    proto-onehundredandthirtynine,
    proto-onehundredandfourty,
    proto-onehundredandfourtyone,
    proto-onehundredandfourtytwo,
    ethernet,
    proto-onehundredandfourtyfour,
    proto-onehundredandfourtyfive,
    proto-onehundredandfourtysix,
    proto-onehundredandfourtyseven,
    proto-onehundredandfourtyeight,
    proto-onehundredandfourtynine,
    proto-onehundredandfifty,
    proto-onehundredandfiftyone,
    proto-onehundredandfiftytwo,
    proto-onehundredandfiftythree,
    proto-onehundredandfiftyfour,
    proto-onehundredandfiftyfive,
    proto-onehundredandfiftysix,
    proto-onehundredandfiftyseven,
    proto-onehundredandfiftyeight,
    proto-onehundredandfiftynine,
    proto-onehundredandsixty,
    proto-onehundredandsixtyone,
    proto-onehundredandsixtytwo,
    proto-onehundredandsixtythree,
    proto-onehundredandsixtyfour,
    proto-onehundredandsixtyfive,
    proto-onehundredandsixtysix,
    proto-onehundredandsixtyseven,
    proto-onehundredandsixtyeight,
    proto-onehundredandsixtynine,
    proto-onehundredandseventy,
    proto-onehundredandseventyone,
    proto-onehundredandseventytwo,
    proto-onehundredandseventythree,
    proto-onehundredandseventyfour,
    proto-onehundredandseventyfive,
    proto-onehundredandseventysix,
    proto-onehundredandseventyseven,
    proto-onehundredandseventyeight,
    proto-onehundredandseventynine,
    proto-onehundredandeighty,
    proto-onehundredandeightyone,
    proto-onehundredandeightytwo,
    proto-onehundredandeightythree,
    proto-onehundredandeightyfour,
    proto-onehundredandeightyfive,
    proto-onehundredandeightysix,
    proto-onehundredandeightyseven,
    proto-onehundredandeightyeight,
    proto-onehundredandeightynine,
    proto-onehundredandninety,
    proto-onehundredandninetyone,
    proto-onehundredandninetytwo,
    proto-onehundredandninetythree,
    proto-onehundredandninetyfour,
    proto-onehundredandninetyfive,
    proto-onehundredandninetysix,
    proto-onehundredandninetyseven,
    proto-onehundredandninetyeight,
    proto-onehundredandninetynine,
    proto-twohundred,
    proto-twohundredandone,
    proto-twohundredandtwo,
    proto-twohundredandthree,
    proto-twohundredandfour,
    proto-twohundredandfive,
    proto-twohundredandsix,
    proto-twohundredandseven,
    proto-twohundredandeight,
    proto-twohundredandnine,
    proto-twohundredandten,
    proto-twohundredandeleven,
    proto-twohundredandtwelve,
    proto-twohundredandthirteen,
    proto-twohundredandfourteen,
    proto-twohundredandfifteen,
    proto-twohundredandsixteen,
    proto-twohundredandseventeen,
    proto-twohundredandeighteen,
    proto-twohundredandnineteen,
    proto-twohundredandtwenty,
    proto-twohundredandtwentyone,
    proto-twohundredandtwentytwo,
    proto-twohundredandtwentythree,
    proto-twohundredandtwentyfour,
    proto-twohundredandtwentyfive,
    proto-twohundredandtwentysix,
    proto-twohundredandtwentyseven,
    proto-twohundredandtwentyeight,
    proto-twohundredandtwentynine,
    proto-twohundredandthirty,
    proto-twohundredandthirtyone,
    proto-twohundredandthirtytwo,
    proto-twohundredandthirtythree,
    proto-twohundredandthirtyfour,
    proto-twohundredandthirtyfive,
    proto-twohundredandthirtysix,
    proto-twohundredandthirtyseven,
    proto-twohundredandthirtyeight,
    proto-twohundredandthirtynine,
    proto-twohundredandfourty,
    proto-twohundredandfourtyone,
    proto-twohundredandfourtytwo,
    proto-twohundredandfourtythree,
    proto-twohundredandfourtyfour,
    proto-twohundredandfourtyfive,
    proto-twohundredandfourtysix,
    proto-twohundredandfourtyseven,
    proto-twohundredandfourtyeight,
    proto-twohundredandfourtynine,
    proto-twohundredandfifty,
    proto-twohundredandfiftyone,
    proto-twohundredandfiftytwo,
    proto-twohundredandfiftythree,
    proto-twohundredandfiftyfour,
    proto-raw,
    proto-twohundredandfiftysix,
    proto-twohundredandfiftyseven,
    proto-twohundredandfiftyeight,
    proto-twohundredandfiftynine,
    proto-twohundredandsixty,
    proto-twohundredandsixtyone,
    mptcp,
    max,
}

enum %bool {
    %false,
    %true,
}

record option-timestamp {
    tag: option-tag,
    u: timestamp,
}

enum signal {
    sighup,
    sigint,
    sigquit,
    sigill,
    sigtrap,
    sigabrt,
    sigbus,
    sigfpe,
    sigkill,
    sigusr1,
    sigsegv,
    sigusr2,
    sigpipe,
    sigalrm,
    sigterm,
    sigchld,
    sigcont,
    sigstop,
    sigtstp,
    sigttin,
    sigttou,
    sigurg,
    sigxcpu,
    sigxfsz,
    sigvtalrm,
    sigprof,
    sigwinch,
    sigpoll,
    sigpwr,
    sigsys,
}

record addr-unspec {
    n0: u8,
}

record addr-unspec-port {
    port: u16,
    addr: addr-unspec,
}

record cidr-unspec {
    addr: addr-unspec,
    prefix: u8,
}

record http-handles {
    req: fd,
    res: fd,
    hdr: fd,
}

record http-status {
    ok: %bool,
    redirect: %bool,
    size: filesize,
    status: u16,
}

type ri-flags = u16

type ro-flags = u16

type sd-flags = u8

type si-flags = u16

enum timeout {
    read,
    write,
    connect,
    accept,
}