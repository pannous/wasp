# format:
# alias : variant (,variant)*
# lists need comma separation because operators could act on expression

# In an operator hierarchy one could implement fine grained comparisons:
# ~ => ≃ => equivalent ≙  => ﹦ => identical ≡, exactly identical, ≣
# also ternary a~b%c means a≙b wrt. c  (with respect to)

:= : be, ≔, ≝,⩦,⭀,⥱   # ≕ <> set let var val ⪮ ⩷
=: is, ﹦, ＝, ⁼  # used as defining AND as comparison!
== : equals, ⩵, ≟, ≌, ≑, ≗, ≛, ≜,  equivalent, ≡, identical, ≣, ≙, ≍, ⩶, is_equal, equal, same, the same as     # even par
~ : similar, ⋍, ≈,⩯,⩰, ≊, ≌, ~~, circa, approximately, around, like    #  about <> ± ∓
!= : ≠, ≢, unequal, ≭, different, is_not, unlike, ≉, ≆, ≇, ≄ # separate from
! : not, ¬
+= : increase ⩲ ⩱
∊ : in, ∈, of, from, has, contains # vs ∉ ∋ ∍ ∌ item element ?
. : get, ∋, ∍
¡ : puts, print, printf, writeLine, println, echo
% : modulo, mod, mod_d # regarding, with respect, in context
ƒ : func, function, func, fun, fn, def, defun, defn, define /*!?!*/, to…
√ : sqrt, root, square_root
| : then, pipe
* : times, ×, ⋅, mul, multiply
+ : plus, add, ﹢, ＋, ⁺, ˖ ̟ ⁺ ᐩ ⁺ ₊ ﹢ ＋ 𒈦 // ∔ ⊕ ⊞
- : minus,−,﹣,－,⁻,₋,∸ neg, negative, hyphen  // hyphen  ;) negative only as prefix neg<>negate :(  -≠−!
> : more, ≰, greater, bigger, larger, higher, longer # (…than)!
< : less, ≱, lesser, smaller,lower,tinyer,shorter

|> : as, cast, convert, convert_to

# todo : move to math library:
log10: log₁₀, 10⌟, ⌞10
log2: log₂, 2⌟, ⌞2
lnₓ: logₓ, x⌟, x˅, ⌄x, ⌞x, logarithm_to_base_x
ln: logₑ, ⌟,  ⌞, e⌟,  ⌞e, ⌟ℯ,  ⌞ℯ, ℯ˅, ⌄ℯ, natural_logarithm
exp: ℯ, ℯ^,e^,euler
infix ⌟ a b :=ln(a)/ln(b)

square : ²
orthogonal : ⟂ ﬩ perpendicular
inverse : ⁻¹ # ⅟ prefix
sin : sine, sinus
cos : cosinus cosin
asin : arcsine
acos : arccos
∞ : infinity
-∞ : minus infinity

# superscript signs bind higher! `x²⁺³ == x⁵`