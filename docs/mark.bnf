/*--------------------------------------------------------
Modified from JSON5 grammar at: 
https://github.com/json5/json5-spec/blob/master/json5.abnf
--------------------------------------------------------*/

eol ::= LF | CRLF | CR          /* End-of-line */

eof ::= EOF           			/* End-of-input */

/*--------------------------------------------------------*/

comment ::= sl_comment | ml_comment

sl_comment ::= begin_sl_comment (pchar | ows)* (eol | eof)

ml_comment ::= begin_ml_comment (pchar_non_star | ('*' pchar_non_slash) | ows | eol)* end_ml_comment

begin_sl_comment ::= '//'

begin_ml_comment ::= '/*'

end_ml_comment   ::= '*/'

pchar ::= [#x20-#x7E] | [#x80-#x10FFFF] /* Printable character */

pchar_non_star ::= [#x20-#x29] | [#x2B-#x7E] | [#x80-#x10FFFF] /* Printable character except * */

pchar_non_slash ::= [#x20-#x2E] | [#x30-#x7E] | [#x80-#x10FFFF] /* Printable character except / */

/*--------------------------------------------------------*/
ws_char ::= SP |        /* Space */
        HTAB |          /* Horizontal tab */
        eol				/* Line ending */
ws ::= (ws_char | comment)*

/*--------------------------------------------------------*/

null  ::= 'null'

boolean  ::= 'true' | 'false'

/*-- number ------------------------------------------------------*/

number ::= ('+' | '-')? (nan | inf | dec)

nan ::= 'NaN'

inf ::= 'Infinity'

dec ::= (int ('.' digit*)? | ('.' digit+)) (exp)?   

exp ::= ('e' | 'E') ('+' | '-')? digit+

int ::= '0' | ([1-9] digit*)

digit ::= [0-9]

/*-- binary data ------------------------------------------------------*/
binary ::=  base64_binary | ascii85_binary

base64_binary ::= '{:' ([0-9a-zA-Z] | '+' | '/' | ws_char)* '='? '='? '}' /* 2 optional padding characters */

ascii85_binary ::= '{:~' ([#x21-u] | 'z' | ws_char)* '~}'

/*-- string ------------------------------------------------------*/

string ::= s_string | d_string | t_string

d_string ::= '"' (char | "'")* '"'

s_string ::= "'" (char | '"')* "'"

/* tripple quoted string */
t_string ::= ("'''" triple_single "'''") | ('"""' triple_double '"""')

tchar ::= [#x20-#x21] | [#x23-#x26] | [#x28-#x7E] | [#x80-#x10FFFF] /* printable characters except " and ' */

triple_single ::= (tchar | '"' | ("'" tchar) | ("''" tchar))* "'"? "'"? /* chars without tripple single quote */

triple_double ::= (tchar | "'" | ('"' tchar) | ('""' tchar))* '"'? '"'? /* chars without tripple double quote */

char ::= unescaped | escaped

unescaped ::= [#x20-#x21] | [#x23-#x26] | [#x28-#x5B] | [#x5D-#x7E] | [#x80-#x10FFFF]
   
escaped ::= '\' (
   "'" |			/* this is needed as we allows single quote string */
   '"' |
   '\' |
   '/' |
   'b' |            /* b    backspace       U+0008 */
   'f' |            /* f    form feed       U+000C */
   'n' |            /* n    line feed       U+000A */
   'r' |            /* r    carriage return U+000D */
   't' |         	/* t    tab             U+0009 */
   unicode			/* uXXXX                U+XXXX */
   )

unicode ::= 'u' hexdig hexdig hexdig hexdig	

hexdig ::= [0-9a-fA-F]

/*-- array ------------------------------------------------------*/

array ::= begin_array (value value_separator?)* end_array

begin_array     ::= ws '[' ws

end_array       ::= ws ']' ws

value_separator ::= ws ',' ws

/*-- JSON object ------------------------------------------------------*/

json_object ::= begin_object properties end_object

begin_object ::= ws '{' ws

end_object ::= ws '}' ws

properties ::= (property value_separator?)*

property ::= key separator value

separator ::= ws ':' ws

key ::= string | identifier

identifier ::= begin_identifier continue_identifier*

begin_identifier ::= [a-zA-Z] | '_' | '$'

continue_identifier ::= begin_identifier | digit | '-' | '.'

/*-- Mark object ------------------------------------------------------*/

/* Note: Mark property key cannot be numeric - this constraint cannot be directly expressed in BNF notation */ 
mark_object ::= begin_object type_name properties contents end_object

type_name ::= key ws

contents ::= (text | json_object | mark_object | mark_pragma | ws)*

text ::= (string ws)+   /* Mark text can be multiple consecutive strings */

mark_pragma ::= '{' (pragma_escape | pchar_no_brace_colon)+ '}'

pragma_escape ::= '\' ('{' | '}' | ':' | ';')

pchar_no_brace_colon ::= [#x20-#x39] | [#x3C-#x7A] | '|' | [#x7E-#x10FFFF] /* Printable characters except {, }, :, ; */

/*-- root ------------------------------------------------------*/

value ::= null | boolean | number | string | binary | array | json_object | mark_object | mark_pragma

Mark ::= ws value ws
